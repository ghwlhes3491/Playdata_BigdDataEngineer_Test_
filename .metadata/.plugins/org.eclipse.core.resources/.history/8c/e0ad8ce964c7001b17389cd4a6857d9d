package com.concert.service;

import java.util.ArrayList;

import com.concert.model.Info;
import com.concert.model.Member;
import com.concert.exception.CommonException;
import com.concert.exception.RecordNotFoundException;
import com.concert.exception.DuplicateException;


public class MemberService {


	/** 회원들을 저장관리하기 위한 자료 저장구조 : Generic */
	private ArrayList<Member> list = new ArrayList<Member>();
	private ArrayList<Info> playList = new ArrayList<Info>();

	/** 기본생성자 : 초기화 회원 등록 수행 */
	public MemberService() {}	
	/**
	 * 공연 등록
	 * @param dto 등록 회원
	 */
	public void addInfo(Info playCode) throws DuplicateException {	
		int index = exist(playCode.getplayCode());
		if (index >= 0) {
			throw new DuplicateException(playCode.getplayCode());
		}
		playList.add(playCode);
	}
	
	/**
	 * 회원 등록
	 * @param dto 등록 회원
	 */
	public void addMember(Member dto) throws DuplicateException {	
		int index = exist(dto.getMemberId());
		if (index >= 0) {
			throw new DuplicateException(dto.getMemberId());
		}
		list.add(dto);
	}
	/**
	 * 회원 등록
	 * -- 사용자 입력 데이터 : 아이디, 비밀번호, 이름, 휴대폰, 이메일
	 * @param memberId 아이디
	 * @param memberPw 비밀번호
	 * @param name 이름
	 * @param mobile 휴대폰 
	 * @param email 이메일
	 * @param cash 캐시
	 * @param grade 등급(G: 일반회원, A: 관리자)
	 * @throws DuplicateException
	 */
	public void addMember(String memberId, String memberPw, String name, String mobile, String email) throws DuplicateException {
		Member dto = new Member(memberId, memberPw, name, mobile, email, 0, "G");
		addMember(dto);
	}	

	/**
	 * 회원 존재 유무 조회
	 * @param memberId 아이디
	 * @return 존재시 저장위치 인덱스번호, 미존재시 -1
	 */
	public int exist(String memberId) {
		for (int index = 0; index < list.size(); index++) {
			if (list.get(index).getMemberId().equals(memberId)) {
				return index;
			}
		}
		return -1;
	}
	
	/**
	 * 테스트를 위한 회원 초기화 등록 메서드
	 * @return 초기화 회원등록 인원수
	 * @throws DuplicateException 
	 */
	public int initMember() throws DuplicateException {
		Member dto1 = new Member("user01", "password01", "김일번", "01012341111", "user01@work.com", 0,"G");
		Member dto2 = new Member("user02", "password02", "김이번", "01012342222", "user02@work.com", 0,"G");
		Member dto3 = new Member("user03", "password03", "김삼번", "01012343333", "user03@work.com", 0,"G");
		Member dto4 = new Member("user04", "password04", "김사번", "01012344444", "user04@work.com", 0,"G");
		Member dto5 = new Member("administrator", "admin1004", "관리자", "01012345000", "administrator@work.com", 0,"A");

		addMember(dto1);
		addMember(dto2);
		addMember(dto3);
		addMember(dto4);
		addMember(dto5);
		
//		list.add(new Member("user01", "password01", "김일번", "01012341111", "user01@work.com", 0,"G"));
//		list.add(new Member("administrator", "admin1004", "관리자", "01012345000", "administrator@work.com", 0,"A"));
//		
//		for (int index = 0; index < list.size(); index++) {
//			System.out.println(list.get(index));
//		}
		return list.size();
	}

	public void initInfo() throws DuplicateException{
		Info Info001 = new Info("play_001", "뮤지컬 더 리퍼", "06-12","19:30","22:00","문채원","송중기");
		Info Info002 = new Info("play_002", "옥탑방 고양이", "06-19","20:00","22:00","남정은","이경민");
		Info Info003 = new Info("play_003", "피카츄의 대모험", "06-26","19:30","21:30","소니아","금랑");
		Info Info004 = new Info("play_004", "낫아웃", "07-03","20:00","22:30","송이재","정재광");
		Info Info005 = new Info("play_005", "행복", "07-10","19:30","21:30","김단율","정영성");
		
		addInfo(Info001);
		addInfo(Info002);
		addInfo(Info003);
		addInfo(Info004);
		addInfo(Info005);
		
		for (int index = 0; index <playList.size(); index++) {
			System.out.println(playList.toString());
		}
	}
	/**
	 * 회원 상세조회
	 * @param memberId 회원아이디
	 * @return 존재하면 회원객체, 미존재 null
	 * @throws RecordNotFoundException 
	 * @see exist(String)
	 */
	public Member getMember(String memberId) throws RecordNotFoundException {
		int index = exist(memberId);
		if (index >= 0) {
			return (Member)list.get(index);
		}
		
		throw new RecordNotFoundException(memberId);
//		return null;
	}
	/**
	 * 로그인
	 * @param memberId
	 * @param memberPw
	 * @return 성공시 회원 등급, 실패시 null
	 * @throws RecordNotFoundException 
	 * @throws CommonException 
	 */
	public String login(String memberId, String memberPw) throws RecordNotFoundException, CommonException {
		try {
			Member dto = getMember(memberId);
			if (dto.getMemberPw().equals(memberPw)) {
				return dto.getGrade();
			}
			throw new CommonException("회원의 정보가 올바르지 않습니다.");
		} catch (RecordNotFoundException e) {
			throw e;
		}
	}
	


}
