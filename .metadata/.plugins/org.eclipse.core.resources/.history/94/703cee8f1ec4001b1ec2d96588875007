package com.work.model.service;

import java.util.ArrayList;
import java.util.HashMap;

import com.work.exception.DuplicateException;
import com.work.exception.RecordNotFoundException;
import com.work.model.dto.Member;
import com.work.util.Utility;

/**
 * <pre>
 * collection API활용 변경
 * -- Generic
 * </pre>
 * @author 김현진
 * @version ver1.0
 * @since jdk1.8
 */
public class MemberService {
	/** 회원들을 저장,관리하기위한 자료 저장 구조*/
	private ArrayList<Member> list = new ArrayList<Member>();
	
	/** 기본생성자 : 초기화 회원 등록*/
	public MemberService() {	//생성자는 값 돌려주지 않음.
//	 int count = initMember();
//	 System.out.println("초기화 회원 등록작업이 완료되었습니다. : "+ initMember());
	}
	
	
	/** 회원 탈퇴
	 * @param memberId	아이디
	 * @param memberPw 비밀번호
	 * @return	성공 시 탈퇴회원 기존 정보, 실패시 null
	 */
	//아까 비밀번호 변경 로직과 같음
	public Member removeMember(String memberId, String memberPw) {
		int index = exist(memberId);

		if(index >= 0 && list.get(index).getMemberPw().equals(memberPw)) {
			return list.remove(index);
		}
		return null;
	}
	
	/** 회원 탈퇴2 (아이디만)
	 * @param memberId	아이디
	 * @return	성공 시 탈퇴회원 기존 정보, 실패시 null
	 */
	//아까 비밀번호 변경 로직과 같음
	public Member removeMember(String memberId) {
		int index = exist(memberId);
		if(index >= 0) {
			return list.remove(index);
		}
		return null;
	}
	
	
	
	/**회원정보 전체 변경
	 * @param dto 변경회원 객체
	 * @return 성공 시 true, 실패 시 false 반환(아이디가 존재하지 않을 때)
	 */
	public boolean setMember(Member dto) {
		int index = exist(dto.getMemberId());
		if(index >= 0 ) {
			list.set(index, dto);
			return true;
		}
		
		return false;
	}
	/** 비밀번호 변경
	 * 비밀번호 변경
	 * -- 아규먼트 : 아이디, 비밀번호, 변경비밀번호
	 * -- 도메인 데이터 각각 : 아이디, 비밀번호, 변경비밀번호
	 * -- 도메인 객체?? : Member?? x (안됨) . 도메인 속성에 변경 비밀번호 없음
	 * -- Map : (key, value) 형식
	 * @return
	 */
	public boolean setMemberPw(String memberId, String memberPw, String modifyMemberPw) {
		int index = exist(memberId);
		if(index>=0 && list.get(index).getMemberPw().equals(memberPw)) {	//이중 if문 &&으로 바꿔쓸 수 있음.
				list.get(index).setMemberPw(modifyMemberPw);
				return true;
			}
		return false;// false인 경우 : 아이디 일치X 경우, 기존 비밀번호 틀린경우.
	}
	
	/** 현재 등록한 전체 회원 조회*/
	public ArrayList getMember() {
		return list;
	}
	
	/** 현재 등록 인원수 조회
	 * @return 현재 등록 인원수 
	 */
	public int getCount() {
		return list.size();
	}
	/**회원 등록
	 * -- 사용자 입력 데이터 : 아이디, 비밀번호, 이름, 휴대폰, 이메일
	 * -- 시스템 최초 가입 시 일반 회원으로 가입처리 : 가입일, 등급[, 마일리지]
	 * @param dto 등록 회원
	 */
	public void addMember(Member dto) throws DuplicateException {
//		if(exist(dto.getMemberId()) == -1) { // 중복 아이디 존재하지 않을 때
//			list.add(dto); 	// list순서존재, 중복허용
//		}else {
//			System.out.println("[오류] 동일한 아이디가 존재합니다 : " + dto.getMemberId());
//		}
		
		int index = exist(dto.getMemberId());
		if(index >= 0) {	//아이디 중복일 때 
			throw new DuplicateException(dto.getMemberId());
		}
		list.add(dto);
	}
	
	public void addMember(String memberId, String memberPw, String name, String mobile, String email) throws DuplicateException {
		Member dto = new Member(memberId, memberPw, name,mobile, email);
		dto.setGrade("G");
		dto.setEntryDate(Utility.getCurrentDate());
		dto.setMileage(1000);
		
		addMember(dto);
	}
	
	/**
	 * 회원존재 유무 조회 : 저장된 회원의 크기만큼 반복, 저장객체 조회(Object), instanceof, type casting, equals()
	 * @param memberId 아이디
	 * @return 존재 시 저장위치 인덱스 번호, 미존재시 -1
	 */
	// 1. 저장된 회원의 크기만큼 반복
	// 2. memberId로 입력된 객체가 있는지 index순서대로(?) 찾음.

	public int exist(String memberId) {	
		for(int index = 0; index < list.size(); index++) {
			if(list.get(index).getMemberId().equals(memberId)) {
				return index;
			}
		}
		return -1;
	}
	
	/**
	 * 테스트를 위한 회원 초기화 등록 메서드
	 * @return 초기화 회원 등록 인원수 - 5명 
	 * @throws DuplicateException 
	 */
	public int initMember() throws DuplicateException {
		Member dto1 = new Member("user01", "password01", "홍길동", "01012341000", "user01@work.com", "2020-12-15", "G", 50000,null);
		Member dto2 = new Member("user02", "password02", "강감찬", "01012342000", "user02@work.com", "2021-01-05", "G", 950000, null);
		Member dto3 = new Member("user03", "password03", "이순신", "01012343000", "user03@work.com", "2020-11-15", "S", 0, "강동원");
		Member dto4 = new Member("user04", "password04", "김유신", "01012344000", "user04@work.com", "2021-01-05", "S", 0,"김하린");
		Member dto5 = new Member("administrator", "admin1004", "유관순", "01012345000", "administrator@work.com", "2020-04-01", "A");
		
		addMember(dto1);
		addMember(dto2);
		addMember(dto3);
		addMember(dto4);
		addMember(dto5);
		
		return list.size();
	}
	/**
	 * 회원상세 조회 
	 * @param memberId 회원아이디
	 * @return 존재하면 회원 객체, 미 존재하면 null
	 * @throws RecordNotFoundException 
	 * @see exist(String)
	 */
	public Member getMember(String memberId) throws RecordNotFoundException {
		int index = exist(memberId);
		if(index >= 0 ) {
			return list.get(index);
		}
		
		throw new RecordNotFoundException(memberId);
		//return null; // 쓸 수 없음 throw 되는 순간 그 쪽으로 반환됨.
	}
	/*
	 * 로그인
	 * -- 처리절차
	 * -- 메서드명
	 * -- 매개변수
	 * -- 반환타입	: ???
	 * 1. 회원전용 서비스 : boolean
	 * 2. 회원등급별 차등 서비스 : 로그인 성공 - 해당회원의 등급(String) / 로그인 실패 - null (아이디 미존재, 비밀번호 불일치)
	 * 3. 로그인시 자동 등업 처리를 한다면? 
	 * => 반환타입은??? 로그인 성공한 회원의 등급, 일반회원이 우수회원 등업시 결과 메세지
	 * => 단일값 String, Domain 객체 Member 사용불가, Collection(자동으로 추가가능) List,Set, Map(: key-value)
	 * 	3.1 : 로그인 성공?
	 * 	3.2 : 등급이 일반회원?
	 * 	3.3 : 일반회원이면 마일리지 변경(로그인 마일리지 추가)
	 * 	3.4 : 일반회원이면 마일리지가 현재 100,000이상이니?
	 *  3.5 : 일반회원의 현재 마일리지가 100,000 이상이면 
	 *  		=> 우수회원 등업처리를 위한 메서드 dispatch(위임)
	 *  		=> 우수회원등업요청(로그인 성공한 일반회원 아이디)
	 *  3.6 : 일반회원이 우수회원으로 등업처리 결과를 받아서  : 담당자 결과 받아서
	 *  3.7 : 우수회원으로 등업된 회원에게 "우수회원으로 등업되었습니다. 담당자는 : ~~~" 로그인 성공 응답
	 *  	=> 우수회원 등업의 결과를 출력 메세지 처리
	 *  	=> 응답결과로 반환
	 *  
	 *  4. 로그인은 성공했으나 일반회원이 아니라면?
	 *  4.1 : 로그인 성공처리 응답
	 */
	/**
	 * 로그인 
	 * @param memberId
	 * @param memberPw
	 * @return 성공시 true, 실패시 false
	 */
	public boolean login1(String memberId, String memberPw) {
		return false;
	}
	/**
	 * 로그인
	 * @param memberId
	 * @param memberPw
	 * @return 성공시 회원등급, 실패시 null
	 */
	public String login2(String memberId, String memberPw) {
		return null;
	}
	/**
	 * 로그인
	 * 로그인 성공시 : 회원등급(grade) + [.. name등 필요시 부가 속성 추가 가능]
	 * 일반회원 자동등업 성공시 : 회원 등급(grade) + 담당자(manager)
	 * @param memberId
	 * @param memberPw
	 * @return
	 */
	public HashMap<String, String> login3(String memberId, String memberPw){
		
	}
	/*
	 * 마일리지 변경
	 * -- 마일리지 정책??
	 * 1. 로그인시마다 일반회원인 경우에는 마일리지 500추가
	 */
	public int addMileage(String memberId, int mileage) throws RecordNotFoundException{
	try {
		Member dto = getMember(memberId);
		if(dto.getGrade().equals("s")) {
			dto.setMileage(dto.getMileage() + mileage);
			return dto.getMileage();
		}
		}
	}
	public void clearMileage(String memberId) {
		
	}
	/*
	 * 우수회원 등업처리 
	 * -- 처리절차(방법)
	 * 1. 일반회원이 본인의 마일리지정보 조회하고 => 관리자에게(시스템) 등업 요청
	 * 2. 자동등업 :
	 * 		=> 100,000점이 넘으면 자동으로 등업	=> 마일리지 변경처리 메서드에서 수행 로직 수정해야함.
	 * 		=> 로그인 성공 시 자동으로 확인해서 등업
	 * 3. 관리자가 회원정보 조회해서 등업처리
	 * -- 처리절차
	 * 1. 아이디를 매개변수로 전달 => 일반회원? 마일리지 100,000??
	 * 2. 등급 : 우수회원 변경
	 * 3. 담당자 : 배정
	 * 4. 마일리지 : 0 으로 변경 (우수회원은 마일리지 상관없으므로)
	 * 5. 배정된 담당자 이름 반환
	 * 
	 * -- 메서드명
	 * -- 매개변수 : 회원아이디
	 * -- 반환타입 : 담당자
	 */
	
	/*
	 * 아이디 찾기
	 * -- 처리절차
	 * -- 메서드명
	 * -- 매개변수
	 * -- 반환타입
	 */
	
	/*
	 * 비밀번호 찾기
	 * 1. 기존 비밀번호 반환 : 보안이슈로 현재 거의 사용X
	 * 2. 임시암호발급 변경 후 반환 : 휴대폰 문자, 이메일 발송, 응답화면 메세지
	 * 3. 암호변경위한 메뉴 제공
	 * -- 처리절차
	 * -- 메서드명
	 * -- 매개변수
	 * -- 반환타입
	 */
	
	
	
//	/** 우수회원 등업*/		<< 직접해보기
//	public Member levelUp(int mileage) {
//		if(mileage>= 1000) {
//			//1. mileage가 1000이상인지 확인한다. 
//			//2. 해당하는 회원들의 인덱스 번호를 반환한다.
//			//2. 그 회원의 값을 우수회원 메서드 ( mileage, manager)있는 데에 전달한다.
//
//		}
//	}
//	
	
	
	
	
	
	
	
	
}
